/*
 * Update the pad with feedback from the server
 * @param {object} data
 */
function updatePad(data) {

	var fjq = $('[name="ace_outer"]').contents().find('[name="ace_inner"]')[0].contentWindow.$;


	//Get the content frame
	var contentFrame = $('[name="ace_outer"]').contents().find('[name="ace_inner"]');

	var content = contentFrame.contents().children().find('body#innerdocbody');

	colorPad(data, content, function(data, content) {
		addBrackets(data, content);
	});

}


/*
 * Add brackets to the pad to highlight paragraphs
 * @param {object} data
 * @param {object} content
 */
function addBrackets(data, content) {
	
	var children = content.children('div');
	var i = 0;
	var j = 0;
	var first = true;
	var last = false;
	var color = data.text[i].Colour;
	
	content.children('div').each(function () {		
		//Remove HTML tags
		var content = $(this).html().replace(/<\/?[^>]+(>|$)/g, "");

		//If line is empty, new paragraph starts
		if (content === '') {
			i++;
			first = true;
			if (data.text.hasOwnProperty(i)) {
				color = data.text[i].Colour;
			}
		} else {
			j++;
			var style = {};

			//Get the content of the next div and check if its empty
			var next = $(this).next().html().replace(/<\/?[^>]+(>|$)/g, "");

			if (next === '') {
				last = true;
			}

			//Always add border sides to the div
			$(this).addClass('fb-box fb-box-sides');

			//Add the top border if its the first div of the paragraph
			if (first) {
				first = false;

				/* 				$(this).addClass('fb-box-top'); */

			} else {
				$(this).addClass('fb-box-notoppadding');
			}

			//If this is the last div of the paragraph add a bottom
			if (last) {
				last = false;

				/* 				$(this).addClass('fb-box-bottom'); */
			} else {
				$(this).addClass('fb-box-nobottompadding');
			}

			$(this).css('border-color', color);

			//Set the style to the pad
			//$(this).css(style);
		}
	});
}


/*
 * Highlight the words in the pad
 * @param {int} color
 * @param {object} loc
 */
function hightlightWord(color, loc) {
	
	var ace = this.ace;
	
	//console.log('X1 = ' + loc.startX + ' X2 = ' + loc.endX + ' Y1 = ' + loc.startY + ' Y2 = ' + loc.endY);
/* 	if (typeof loc === undefined) {
				console.log('ohoh'); */
		
	ace.callWithAce(function (ace){
		//Prevent a loc not found error in browser console
		try {

			//console.log('startin highlght');
			ace.ace_performSelectionChange([loc.startX,loc.startY],[loc.endX,loc.endY],true);
			ace.ace_doInsertColors(color);
			//console.log('end highlight'); */
		} catch (error) {
			console.log(error);
		}
	},'insertColor', true);	
}


/*
 * Make sure at the end nothing is selected
 */
function removeSelection() {
	var ace = this.ace;
	
	ace.callWithAce(function (ace){
		ace.ace_performSelectionChange([0,0],[0,0],true);
	},'insertColor', true);
}


/* 
 * Check which words has to be colored in the pad.
 * @param {object} data
 * @param {array} content
 * @param {function} cb
 */
function colorPad(data, content, cb) {

	var fullText = getText(content);

	var children = content.children('div');

	//Reset the color to black
	resetColor(children);

	var ace = this.ace;
	var timeout = 0;

	//Loop through the info, and check for words to highlight in each paragraph
	for (var i in data.text) {

		for (var j in data.text[i].highlights) {
			var light = data.text[i].highlights[j];
			//console.log('data text voor i is:', data.text[i]);

			getLocation(light, fullText[i], function(color, loc) {
				
				//Color the location if it's found
				if (loc !== null && typeof loc !== undefined && typeof loc !== 'undefined') {
					timeout += 0;
					setTimeout(function() {
						console.log('Light on: ' + light + ' in paragraph ' + i);
						console.log(light);
						console.log('startHighlight');
						console.log('print loc:');
						console.log(typeof loc);
						console.log(loc);
						hightlightWord(color, loc);
					}, timeout);
				}		 
	
			});
		}
	}
	
	//Callback after everything is done, extra 100 timeout to make sure jQuery is done
	setTimeout(function() {
		cb(data, content); 
		removeSelection();
	}, 100);
}


/*
 * Reset all the colors to black
 * @param {object} children
 */
function resetColor(children) {

	//Get number of rows
	var rows = children.size();

	//Set the complete pad to black
	ace.callWithAce(function (ace){
		ace.ace_performSelectionChange([0, 0],[rows, 0],true);
		ace.ace_doInsertColors(0);
		// Note that this is the correct way of doing it, instead of there being
		// a commentId we now flag it as "comment-deleted"
	},'insertColor', true);
}


/* 
 * Our colors attribute will result in a heaading:h1... :h6 class
 * @param {string} hook
 * @param {object} context
 */
function aceAttribsToClasses(hook, context){
	if(context.key == 'colors'){
		return ['colors:' + context.value ];
	}
}


/* 
 * Here we convert the class colors:h1 into a tag
 * @param {string} name
 * @param {string} context
 * @Copyright to plugin ep_color. 
 */
function aceCreateDomLine(name, context){
	var cls = context.cls;
	var domline = context.domline;
	var colorsType = /(?:^| )colors:([A-Za-z0-9]*)/.exec(cls);

	var tagIndex;
	if (colorsType) tagIndex = _.indexOf(colors, colorsType[1]);


	if (tagIndex !== undefined && tagIndex >= 0){
		//console.log('COLOR');
		//console.log(tagIndex, colorsType[1]);    

		var tag = colors[tagIndex];
		var modifier = {
			extraOpenTags: '<span style="color: ' + tag + ';">',
			extraCloseTags: '</span>',
			cls: cls
		};
		//console.log(cls);
		return [modifier];
	}
	return [];
}


/* 
 * Find out which lines are selected and assign them the colors attribute.
 * Passing a level >= 0 will set a colors on the selected lines, level < 0 
 * will remove it
 * @param {int} level
 * @Copyright to plugin ep_color. 
 */
function doInsertColors(level){
	console.log('doinsertcolors');
	var rep = this.rep,
		documentAttributeManager = this.documentAttributeManager;
	if (!(rep.selStart && rep.selEnd) || (level >= 0 && colors[level] === undefined))
	{
		return;
	}

	if(level >= 0){
		console.log('level 00');
		documentAttributeManager.setAttributesOnRange(rep.selStart, rep.selEnd, [
			['colors', colors[level]]
		]);
	}else{
		documentAttributeManager.setAttributesOnRange(rep.selStart, rep.selEnd, [
			['colors', '']
		]);
	}
}


/* 
 * Once ace is initialized, we set ace_doInsertColors and bind it to the context
 * @param {string} hook
 * @param {object} context
 * @Copyright to plugin ep_color. 
 */
function aceInitialized(hook, context){
	var editorInfo = context.editorInfo;
	editorInfo.ace_doInsertColors = _(doInsertColors).bind(context);
}


//Make sure that exports doesn't give an error
try {
	exports.aceAttribsToClasses = aceAttribsToClasses;
	exports.aceCreateDomLine = aceCreateDomLine;
	exports.aceInitialized = aceInitialized;
} catch (err) {

}