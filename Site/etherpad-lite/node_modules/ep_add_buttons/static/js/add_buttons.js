/*** 
*
* Most of the logic for task lists are done here
*
*/


if(typeof exports == 'undefined'){
  	var exports = this['mymodule'] = {};
}

/*** Add button to the editbar and bind a listener ***/
exports.add_buttons = {

	// Write the button to the dom
	init: function(){ 

		// make a sidebar with the button
		var buttonHTML = '<div id="sidebar"><div id="sidebarInner"><button class="acl-write" id="analyseButton"><a class="grouped-right" data-l10n-id="pad.toolbar.add_buttons.title" title="Task list Checkbox"><span class="buttonicon buttonicon-add_buttons"></span> Analyseer Tekst</a></button></div></div>';

		// append the sidebar and button to the pad content
		$('#editorcontainerbox').append(buttonHTML);

		// add an on click action to the button
		$('#analyseButton').click(function(){
			exports.add_buttons.onButton();
		});

	},	
	
	// execute this action on click	
	onButton: function(){ 
		
		console.log("Push my button baby");
		
		// Get the current url with the download link appended. Change txt to html or etherpad for other formats
		var fullUrl = window.location.href + "/export/txt" ;		
		
		// Make an ajax call to the link to get the current pad content
		jQuery.get(fullUrl, function(data) {
            var textContent = data;
			console.log("Content is:");
			console.log(data);
			
			data = splitParagraphs(data);
			console.log(data);
			
			//countWords(data);
			//countSentences(data);
			sendParagraphs(data, function(analyzedData) {
				console.log(analyzedData);	
				
				var overallScore = 69;
				addScoreToSidebar(overallScore);
				countSentences(data);
			});
        });		
	},
}



// split the paragraphs, and return them in an array. 
function splitParagraphs(data) {
	// defined as a double newline
	data = data.split(/\n\n/);
	
	// IE support for filter is from IE9 on
	data = data.filter(function(e){ return e.replace(/(\r\n|\n|\r)/gm,"");});
	
	return data;
}


function countWords(data) {
	
}

function countSentences(data) {
	
	
}

function addScoreToSidebar(AVIscore) {
	var div = document.createElement('div');

    div.className = 'aviScore';

    div.innerHTML = 'AVI score is: ' + AVIscore;

	document.getElementById('sidebarInner').appendChild(div);
}

// send the paragraphs via the websocket to python
function sendParagraphs(data, callback) {
	
	var message = {
		info: {
			id: 1,
			name: 'Ich bin Haije'
		},
		overall: [{
			aviscore: '50',
			analytics: {
				words: 500,
				paragraphs: data.length,
				avgSentence: '5',				
				totalWords: '5'
			}
		}],
		text: []
	};
	
	// Add all paragraphs to object
	for (var i in data) {
		var tmp = {
			paragraph: data[i],
			aviscore: 50,
			analytics: {
				words: 500,
				avgSentence: '5',
				totalWords: '5'
			},
			changed: true
		};
		
		message.text.push(tmp);
	}
	
	var text = sendAnalyzeRequest(message, callback);
}


exports.postAceInit = function(hook, context){
	exports.add_buttons.init();
}


/*
 * Hook called on initialization of pad
 */
exports.aceInitInnerdocbodyHead = function(hook, context) {
	//Start the socket connection
	startConnection();
}
