/*
 * Get the content from inside the text editor.
 */
function getPadContent(callback) {
	
	// Get the current url with the download link appended. Change txt to html or etherpad for other format
	var fullUrl = window.location.href + "/export/txt" ;
	
	// Make an ajax call to the link to get the current pad content
	jQuery.get(fullUrl, function(data) {
		var textContent = data;

		data = splitParagraphs(data);
		
		callback(data);
	});		
}


/*
 * analyze the data from inside the pad
 */
function analyzePadContent(callback) {
	
	getPadContent(function(data) {
		
		//countWords(data);
		//countSentences(data);
		
		sendParagraphs(data, function(analyzedData) {
			addScoreToSidebar(analyzedData);
			updatePad(analyzedData);
			countSentences(data);
		});
		
	});
	
}


/* 
 * split the paragraphs, and return them in an array. 
 */
function splitParagraphs(data) {
	// defined as a double newline
	data = data.split(/\n\n/);
	
	// IE support for filter is from IE9 on
	data = data.filter(function(e){ return e.replace(/(\r\n|\n|\r)/gm,"");});
	
	return data;
}


/*
 * Send the paragraphs via the websocket to python
 */
function sendParagraphs(data, callback) {
	
	var message = {
		info: {
			id: pad.getPadId(),
			corpusSet: $('#dropdown').val()
		},
		overall: [{
			clibScore: 10,
			ciltScore: 20,
			analytics: {
				words: 500,
				paragraphs: data.length,
				avgSentence: '5',				
				totalWords: '5'
			}
		}],
		text: []
	};
	
	// Add all paragraphs to object
	for (var i in data) {
		var tmp = {
			paragraph: data[i],
			analytics: {
				words: 500,
				avgSentence: '5',
				totalWords: '5'
			},
			changed: true
		};
		
		message.text.push(tmp);
		
	}
	
	var text = sendAnalyzeRequest(message, callback);
}


/*
 * Add info to the sidebar
 */
function addScoreToSidebar(data) {
	
	var statistics = ['avi', 'clib', 'cilt'];
	
	//If the wrapper for the metrics already exists update the values, else update the scores.
	if ($('.metrics').length) {
		
		statistics.forEach(function(entry) {			
			var oldscore = $('.metrics-' + entry + 'score').html();
			var newscore = data.overall[0][entry + 'Score'];
			
			$('.metrics-' + entry + 'score').html(newscore);
			
			if (oldscore != newscore ) {
				
				$('.metrics-' + entry + 'score').toggleClass('metrics-score-update');
				
				setTimeout( function(){ 
					$('.metrics-' + entry + 'score').toggleClass('metrics-score-update');
				}  , 1000 );
			}
		});
		
	} else {
		
		var content = '<div class="metrics">' +
				'<table class="metrics-table">';
		
		statistics.forEach(function(entry) {
			content += '<tr class="metrics-row">' +
				'<td class="metrics-title metrics-' + entry + '">' + entry + '-Score</td>' +
				'<td class="metrics-score metrics-' + entry + 'score">' + data.overall[0][entry + 'Score'] + '</td>' +
			'</tr>';
		});
		
		content += '</table>' +
			'</div>';
		
		$('#sidebarInner').append(content);
		
	}
}


/*
 * Update the pad with feedback from the server
 */
function updatePad(data) {
	
	console.log('innerdocbody:');
	console.log($('#innerdocbody').html());
	
	for (var i in data.text) {
		console.log(data.text[i].paragraph);
	}
	
}


function countWords(data) {
	
}

function countSentences(data) {
	
	
}