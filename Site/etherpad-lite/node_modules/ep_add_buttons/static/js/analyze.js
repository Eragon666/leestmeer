var _, $, jQuery;

var $ = require('ep_etherpad-lite/static/js/rjquery').$;
var _ = require('ep_etherpad-lite/static/js/underscore');
var colorsClass = 'colors';

var colors = ['black', 'red', 'green', 'blue', 'yellow', 'orange'];

/*
 * Init function
 */
function analyze(context) {
	this.ace = context.ace;
}

/*
 * Get the content from inside the text editor.
 */
function getPadContent(callback) {

	//Get the content frame
	var contentFrame = $('[name="ace_outer"]').contents().find('[name="ace_inner"]');

	var content = contentFrame.contents().children().find('body#innerdocbody');

	var data = [];
	var paragraph = '';

	//Get all content divjes
	content.children('div').each(function () {		
		//Remove HTML tags
		var content = $(this).html().replace(/<\/?[^>]+(>|$)/g, "");

		//If line is empty, new paragraph starts
		if (content === '') {

			//Only add to array if paragraph is not empty
			if (paragraph !== '') {
				data.push(paragraph);
				paragraph = '';
			}
		} else {
			paragraph = paragraph + content;
		}
	});

	callback(data);



	/* 	// Get the current url with the download link appended. Change txt to html or etherpad for other format
	var fullUrl = window.location.href + "/export/txt" ;

	// Make an ajax call to the link to get the current pad content
	jQuery.get(fullUrl, function(data) {
		var textContent = data;

		data = splitParagraphs(data);

		callback(data);
	});		 */
}


/*
 * analyze the data from inside the pad
 */
function analyzePadContent(type, callback) {

	getPadContent(function(data) {

		//countWords(data);
		//countSentences(data);

		sendParagraphs(data, type, function(analyzedData) {
			addScoreToSidebar(analyzedData);

			//Only update pad on the click of a button
			if (type === 'click') {
				updatePad(analyzedData);
			}

			countSentences(data);
		});

	});

}


/*
 * Send the paragraphs via the websocket to python
 */
function sendParagraphs(data, type, callback) {

	var message = {
		info: {
			id: pad.getPadId(),
			corpusSet: $('#dropdown').val(),
			type: type
		},
		overall: [{
			clibScore: 10,
			ciltScore: 20,
			analytics: {
				words: 500,
				paragraphs: data.length,
				avgSentence: '5',				
				totalWords: '5'
			}
		}],
		text: []
	};

	// Add all paragraphs to object
	for (var i in data) {
		var tmp = {
			paragraph: data[i],
			analytics: {
				words: 500,
				avgSentence: '5',
				totalWords: '5'
			},
			highlights: [
				{
					text: 'Hallo',
					color: '3'
				},
				{
					text: 'gaat',
					color: '5'
				}				
			],
			changed: true
		};

		message.text.push(tmp);

	}

	var text = sendAnalyzeRequest(message, callback);
}


/*addClass
 * Add info to the sidebar
 */
function addScoreToSidebar(data) {

	var statistics = ['avi', 'clib', 'cilt'];

	//If the wrapper for the metrics already exists update the values, else update the scores.
	if ($('.metrics').length) {

		statistics.forEach(function(entry) {			
			var oldscore = $('.metrics-' + entry + 'score').html();
			var newscore = data.overall[0][entry + 'Score'];

			$('.metrics-' + entry + 'score').html(newscore);

			if (oldscore != newscore ) {

				$('.metrics-' + entry + 'score').toggleClass('metrics-score-update');

				setTimeout( function(){ 
					$('.metrics-' + entry + 'score').toggleClass('metrics-score-update');
				}  , 1000 );
			}
		});

	} else {

		var content = '<div class="metrics">' +
			'<table class="metrics-table">';

		statistics.forEach(function(entry) {
			content += '<tr class="metrics-row">' +
				'<td class="metrics-title metrics-' + entry + '">' + entry + '-Score</td>' +
				'<td class="metrics-score metrics-' + entry + 'score">' + data.overall[0][entry + 'Score'] + '</td>' +
				'</tr>';
		});

		content += '</table>' +
			'</div>';

		$('#sidebarInner').append(content);

	}
}


/*
 * Update the pad with feedback from the server
 */
function updatePad(data) {

	var fjq = $('[name="ace_outer"]').contents().find('[name="ace_inner"]')[0].contentWindow.$;


	//Get the content frame
	var contentFrame = $('[name="ace_outer"]').contents().find('[name="ace_inner"]');

	var content = contentFrame.contents().children().find('body#innerdocbody');

	var children = content.children('div');
	var i = 0;
	var j = 0;
	var first = true;
	var last = false;
	var color = data.text[i].Colour;
	var fullText = [];
	fullText[i] = [];

	colorPad(data, content);

	content.children('div').each(function () {		
		//Remove HTML tags
		var content = $(this).html().replace(/<\/?[^>]+(>|$)/g, "");

		//If line is empty, new paragraph starts
		if (content === '') {
			i++;
			fullText[i] = [];
			first = true;
			if (data.text.hasOwnProperty(i)) {
				color = data.text[i].Colour;
			}
		} else {

			fullText[i][j] = content;
			j++;
			var style = {};

			//Get the content of the next div and check if its empty
			var next = $(this).next().html().replace(/<\/?[^>]+(>|$)/g, "");

			if (next === '') {
				last = true;
			}

			//Always add border sides to the div
			$(this).addClass('fb-box fb-box-sides');

			//Add the top border if its the first div of the paragraph
			if (first) {
				first = false;

				/* 				$(this).addClass('fb-box-top'); */

			} else {
				$(this).addClass('fb-box-notoppadding');
			}

			//If this is the last div of the paragraph add a bottom
			if (last) {
				last = false;

				/* 				$(this).addClass('fb-box-bottom'); */
			} else {
				$(this).addClass('fb-box-nobottompadding');
			}

			$(this).css('border-color', color);

			//Set the style to the pad
			//$(this).css(style);
		}
	});

	/* 	for (var i in data.text) {
		console.log(data.text[i].paragraph);
		var color = data.text[i].paragraphColour;

		var end = false;

		console.log(typeof children);
	} */

}


function colorPad(data, content) {

	var fullText = getText(content);

	var children = content.children('div');

	//Reset the color to black
	resetColor(children);

	var ace = this.ace;

	//Loop through the info, and check for words to highlight in each paragraph
	for (var i in data.text) {

		for (var j in data.text[i].highlights) {
			var light = data.text[i].highlights[j];

			var loc = getLocation(light, fullText[i]);

			//Color the location if it's found
			if (loc !== null) {

				ace.callWithAce(function (ace){
					ace.ace_performSelectionChange([loc.startX,loc.startY],[loc.endX,loc.endY],true);
					ace.ace_doInsertColors(light.color);
					// Note that this is the correct way of doing it, instead of there being
					// a commentId we now flag it as "comment-deleted"
				},'insertColor', true);
			}
		}

	}		
}


/*
 * Get all the text from the editor and add it to a array
 */
function getText(content) {
	var i = 0;
	var j = 0;
	var fullText = [];
	fullText[i] = [];

	content.children('div').each(function () {
		//Remove HTML tags
		var content = $(this).html().replace(/<\/?[^>]+(>|$)/g, "");

		//If line is empty, new paragraph starts
		if (content === '') {
			i++;
			j++;
			fullText[i] = [];
		} else {

			fullText[i][j] = content;
			j++;
		}
	});

	return fullText;
}


/*
 * Reset all the colors to black
 */
function resetColor(children) {

	//Get number of rows
	var rows = children.size();

	//Set the complete pad to black
	ace.callWithAce(function (ace){
		ace.ace_performSelectionChange([0, 0],[rows, 0],true);
		ace.ace_doInsertColors(0);
		// Note that this is the correct way of doing it, instead of there being
		// a commentId we now flag it as "comment-deleted"
	},'insertColor', true);
}


/*
 * Get the location of a search inside the text
 */
function getLocation(light, array) {

	var search = light.text;

	//Loop through the array for each line
	for(var index in array) {
		var startY = array[index].indexOf(search);

		//If found
		if (startY > -1) {
			//Get endY, endY is startY + length of the search
			var endY = startY + search.length;

			return {startX: index, startY: startY, endX: index, endY: endY};
		} else {
			return null;
		}
	}
}


// Our colors attribute will result in a heaading:h1... :h6 class
function aceAttribsToClasses(hook, context){
	if(context.key == 'colors'){
		return ['colors:' + context.value ];
	}
}

// Here we convert the class colors:h1 into a tag
function aceCreateDomLine(name, context){
	var cls = context.cls;
	var domline = context.domline;
	var colorsType = /(?:^| )colors:([A-Za-z0-9]*)/.exec(cls);

	var tagIndex;
	if (colorsType) tagIndex = _.indexOf(colors, colorsType[1]);


	if (tagIndex !== undefined && tagIndex >= 0){
		//console.log('COLOR');
		//console.log(tagIndex, colorsType[1]);    

		var tag = colors[tagIndex];
		var modifier = {
			extraOpenTags: '<span style="color: ' + tag + ';">',
			extraCloseTags: '</span>',
			cls: cls
		};
		//console.log(cls);
		return [modifier];
	}
	return [];
}


// Find out which lines are selected and assign them the colors attribute.
// Passing a level >= 0 will set a colors on the selected lines, level < 0 
// will remove it
function doInsertColors(level){
	var rep = this.rep,
		documentAttributeManager = this.documentAttributeManager;
	if (!(rep.selStart && rep.selEnd) || (level >= 0 && colors[level] === undefined))
	{
		return;
	}

	if(level >= 0){
		documentAttributeManager.setAttributesOnRange(rep.selStart, rep.selEnd, [
			['colors', colors[level]]
		]);
	}else{
		documentAttributeManager.setAttributesOnRange(rep.selStart, rep.selEnd, [
			['colors', '']
		]);
	}
}


// Once ace is initialized, we set ace_doInsertColors and bind it to the context
function aceInitialized(hook, context){
	var editorInfo = context.editorInfo;
	editorInfo.ace_doInsertColors = _(doInsertColors).bind(context);
}


try {
	exports.aceAttribsToClasses = aceAttribsToClasses;
	exports.aceCreateDomLine = aceCreateDomLine;
	exports.aceInitialized = aceInitialized;
} catch (err) {

}

function countWords(data) {

}

function countSentences(data) {


}