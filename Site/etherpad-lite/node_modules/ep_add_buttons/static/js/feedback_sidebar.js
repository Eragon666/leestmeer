/*
 * Add info to the sidebar
 * @param {oject} data
 */
function addScoreToSidebar(data) {

	var statistics = ['avi', 'clib', 'cilt'];

	//If the wrapper for the metrics already exists update the values, else update the scores.
	if ($('.metrics').length) {

		statistics.forEach(function(entry) {			
			var oldscore = $('.metrics-' + entry + 'score').html();
			var newscore = data.overall[0][entry + 'Score'];

			$('.metrics-' + entry + 'score').html(newscore);

			if (oldscore != newscore ) {

				$('.metrics-' + entry + 'score').toggleClass('metrics-score-update');

				setTimeout( function(){ 
					$('.metrics-' + entry + 'score').toggleClass('metrics-score-update');
				}  , 1000 );
			}
		});

	} else {

		var content = '<div class="metrics">' +
			'<table class="metrics-table">';

		statistics.forEach(function(entry) {
			content += '<tr class="metrics-row">' +
				'<td class="metrics-title metrics-' + entry + '">' + entry + '-Score</td>' +
				'<td class="metrics-score metrics-' + entry + 'score">' + data.overall[0][entry + 'Score'] + '</td>' +
				'</tr>';
		});

		content += '</table>' +
			'</div>';

		$('#sidebarInner').append(content);

	}
}


/*
 * Add hints to the sidebar
 * @param {object} data
 */
function addHintsToSidebar(data) {	
	var corpus = data.corpus;
	
	var config = {
		defaults: {
			headers: [
				{
					key: "high",
					title: "Dit moet worden gecorrigeerd!",
					color: "red"
				},
				{
					key: "medium",
					title: "Overweeg dit te corrigeren",
					color: "orange"
				},
				{
					key: "done",
					title: "Perfect!",
					color: "#38cc70"
				}
			]
		},		
		checks: [
			{
				name: "typeTokenFrequency",
				hint: "Type token frequency geeft aan hoeveel verschillende woorden er in de tekst gebruikt worden.",
				message: {
					head: "Controleer de type token frequency",
					lower: "Is lager in de paragrafen %p%",
					higher: "Is hoger in de paragrafen %p%",
					equal: ""
				},
				warn: {
					check: 'multiply',
					lower: 2,
					higher: 2,
					equal: false
				},
				combine: true,
				importance: "medium",
				warnings: 0,
				paragraphs: {
					lower: [],
					higher: [],
					equal: []
				},
				activeOn: "typeTokenFrequencyHighlights"
			},
			{
				name: "freqCommonWords",
				hint: "De frequenti veel gebruikte woorden is niet gelijk aan de corpus.",
				message: {
					head: "Controleer het aantal veel voorkomende woorden in de tekst",
					lower: "Te weinig veel voorkomende woorden in %p%",
					higher: "Het aantal veel voorkomende woorden in %p% is relatief hoog",
					equal: ""
				},
				warn: {
					check: "sum",
					lower: 0.1,
					higher: 0.1,
					equal: false
				},
				combine: true,
				importance: "medium",
				warnings: 0,
				paragraphs: {
					lower: [],
					higher: [],
					equal: []
				},
				activeOn: "freqCommonWordsHighlights"
			},
			{
				name: "avgLetters",
				hint: "Het gemiddeld aantal letters per woord is niet gelijk aan het gemiddeld aantal letters per woord in de corpus.",
				message: {
					head: "Controleer gemiddeld aantal letters per woord",
					lower: "De woorden in %p% zijn gemiddeld te kort",
					higher: "De woorden in %p% zijn gemiddeld te lang",
					equal: ""
				},
				warn: {
					check: "sum",
					lower: 1,
					higher: 1,
					equal: false
				},
				combine: true,
				importance: "high",
				warnings: 0,
				paragraphs: {
					lower: [],
					higher: [],
					equal: []
				},
				activeOn: "wordHighlights"
			},
			{
				name: "avgWords",
				hint: "Het aantal woorden per zin is niet gelijk aan de corpus.",
				message: {
					head: "Controleer gemiddeld aantal woorden per zin",
					lower: "In de paragrafen %p% zijn er te weinig woorden per zin.",
					higher: "De volgende paragrafen bevatten te veel woorden per zin: %p%",
					equal: ""
				},
				warn: {
					check: "sum",
					lower: 3,
					higher: 3,
					equal: false
				},
				combine: true,
				importance: "high",
				warnings: 0,
				paragraphs: {
					lower: [],
					higher: [],
					equal: []
				},
				activeOn: "sentenceHighlights"
			}
		]
	};
	
	//c = current, cC = currentCheck, a = paragraph analytics, ca = corpus analytics
	var c, cC, a, ca;
	var par;
	
	
	ca = corpus[0];
	
	
	//For each paragraph check the analysis with the analysis of the corpus
	for (var i in data.text) {
		c = data.text[i];
		a = c.analytics;
		par = parseInt(i) + 1;
		
		for (var j in config.checks) {
			cC = config.checks[j];
			
			$.each(cC.warn, function(index, value) {
				
				//if check is false, continue to next and dont check for this one
				if (!value || index === 'check') {
					return true;
				}
				
				//Check if we need to check for this analytic
				if (!c.checks[cC.activeOn]) {
					return true;
				}
				
				//first check if it is equal
				if (a[cC.name] === ca[cC.name]  && index === 'equal' && cC.warn.check === 'equal') {
					cC.paragraphs.equal.push(par);
					cC.warnings++;
				}
				//If we must check on the sum
				else if (cC.warn.check === 'sum') {
					if (Math.abs(ca[cC.name] - a[cC.name]) > value) {
						if (a[cC.name] < ca[cC.name] && index === 'lower') {
							cC.paragraphs.lower.push(par);
							cC.warnings++;
						} else if (a[cC.name] > ca[cC.name] && index === 'higher') {
							cC.paragraphs.higher.push(par);
							cC.warnings++;
						}
					}
				}	
				//Or check on 'times' the corpus value
				else if (cC.warn.check === 'multiply') {
					if (Math.abs(ca[cC.name] - a[cC.name]) > (value * ca[cC.name])) {
						if (a[cC.name] < ca[cC.name] && index === 'lower') {
							cC.paragraphs.lower.push(par);
							cC.warnings++;
						} else if (a[cC.name] > ca[cC.name] && index === 'higher') {
							cC.paragraphs.higher.push(par);
							cC.warnings++;
						}
					}
				}
			
			});
		}
	}
	
	var text = "";
	
	if (!$('.feedback-wrap').length) {
		addFeedbackColumn(config);	
	}
	
	clearFeedback(config.defaults);	
	
	addFeedback(config.checks);
}


/*
 * Add the column for the feedback and initialize the accordeon effect
 * @param {object} config
 */
function addFeedbackColumn(config) {
	
	var content = '' + 
		'<div class="feedback-wrap">' +
			'<div class="feedback">Feedback</div>' +
			'<div class="accordion">' + 
				'<dl>';
	
	for (var i in config.defaults.headers) {
		var importance = config.defaults.headers[i];
		
		content = content +
					'<dt class="hide-' + importance.key + '">' +
						'<a href="#' + importance.key + '" aria-expanded="false" aria-controls="accordion1" class="accordion-title accordionTitle js-accordionTrigger" style="background-color:' + importance.color + '">' + 
							importance.title +
						'</a>' + 
					'</dt>' +
					'<dd class="accordion-content accordionItem is-collapsed hide-' + importance.key + '" id="' + importance.key + '" aria-hidden="true">' +
					'</dd>';
						
	}
	
	
	content = content + 
				'</dl>' + 
			'</div>' +
		'</div>';
	
	//Add the columns to the sidebar
	$('#sidebarInner').append(content);
	
	//Initialize the accordeon effect
	accordeon();
}


/*
 * Add the updated feedback to the already existing columns
 */
function addFeedback(checks) {
	var cC;
	var text = "";
	var template, par = "";
	
	//Now that we have compared the analytics we can convert the raw data to a more human
	//readable format!
	for (var k in checks) {
		cC = checks[k];
		
		if (cC.combine) {
			
			if (cC.warnings > 0) {
				text += '<p><b class="show-hints" title="' + cC.hint + '">' + cC.message.head + '(' + cC.warnings + ')</b><br>';
				
				$.each(checks[k].paragraphs, function(index, value) {
					if (checks[k].warn[index] !== false && checks[k].paragraphs[index].length > 0) {
						//replace %p% in the template with the paragraphs
						par = checks[k].paragraphs[index].join([separator = ',']);
						template = checks[k].message[index];
						template = template.replace("%p%", par);
						text += template + '<br>';
					}
				}); 
			}
			
			//If the text is filled, append it to the feedback column
			if (text !== '' && typeof text !== undefined) {
				text += '</p>';
				$('#' + checks[k].importance).append(text);
				$('.hide-' + checks[k].importance).show();
				text = '';
			} else {
				text = '<p><b>' + checks[k].message.head + '</b></p>';
				$('#done').append(text);
				$('.hide-done').show();
				text = '';
			}
		} 
	}
	
	tooltip();
}


/*
 * Clear the feedback
 * @param {object} config.defaults
 */
function clearFeedback(defaults) {
	
	for (var i in defaults.headers) {
		$('#' + defaults.headers[i].key).empty();
		$('.hide-' + defaults.headers[i].key).hide();
	}
	
}